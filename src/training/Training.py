from bci import Results, Standby
import target_identification
import constants as c

from ParameterHandler import NewTrainingParameterHandler, BruteForceHandler
from utils import readFeaturesWithTargets, removeResultsAfterChange


class DummyMasterConnection(object):
    def __init__(self):
        self.results = []

    def sendClearBuffersMessage(self):
        pass

    def sendTargetMessage(self, message):
        if not isinstance(message, bool):
            self.results.append(message)

    def sendRobotMessage(self, command):
        pass


def readData(files):
    all_features = []
    all_expected_targets = []
    for i in files:
        training_x, training_y, training_frequencies = readFeaturesWithTargets(
            "U:\\data\\my\\results1_2_target\\results" + str(i) + ".txt",
            "U:\\data\\my\\results1_2_target\\frequencies" + str(i) + ".txt"
        )
        print len(training_x), len(training_x[0]), training_x[0][1]
        print len(training_y)
        # training_x, training_y = removeResultsAfterChange(training_x, training_y, number_of_steps_to_skip)
        all_features.extend(training_x)
        all_expected_targets.extend(training_y)
    return all_features, all_expected_targets, training_frequencies


results = Results.Results()
new_results = Results.Results()
standby = Standby.Standby()
standby.disable()
master_connection = DummyMasterConnection()
target_identification = target_identification.TargetIdentification(master_connection, results, new_results, standby)

features_list, expected, frequencies = readData([11])
print len(features_list), len(features_list[0])
print len(expected)

# frequencies[4] = (frequencies.values()[0] + frequencies.values()[1])/2
# frequencies[5] = (frequencies.values()[2] + frequencies.values()[1])/2
print frequencies

length = 256
step = 32
number_of_steps_to_skip = length/step-1

features_list, expected = removeResultsAfterChange(features_list, expected, 0)
packet_count = len(features_list)*step+length

enable_buffer_clearing = False


def costFunction(numbers, options_handler, frequencies):
    new_options = options_handler.numbersToOptions(numbers)
    target_identification.results.start(frequencies.values())
    target_identification.new_results.start(frequencies.values())
    target_identification.resetNeedNewTarget()
    target_identification.setup(new_options)
    target_identification.resetResults(frequencies.values())
    clear_buffers = False
    packet_counter = 0
    for result, expected_target in zip(features_list, expected):
        # result[1][('Sum PSDA', ('P7', 'O1', 'O2', 'P8'))][1] = [(key, value) for key, value in result[1][('Sum PSDA', ('P7', 'O1', 'O2', 'P8'))][1]
        #                                                         if key in [8.571428571428571,6.666666666666667,7.5]]
        # result[1][('Sum PSDA', ('P7', 'O1', 'O2', 'P8'))][2] = [(key, value) for key, value in result[1][('Sum PSDA', ('P7', 'O1', 'O2', 'P8'))][2]
        #                                                         if key in [8.571428571428571,6.666666666666667,7.5]]
        # result[2][('CCA', ('P7', 'O1', 'O2', 'P8'))] = [(key, value) for key, value in result[2][('CCA', ('P7', 'O1', 'O2', 'P8'))]
        #                                                 if key in [8.571428571428571,6.666666666666667,7.5]]
        if clear_buffers and enable_buffer_clearing:
            packet_counter += step
            if packet_counter >= length:
                packet_counter = 0
                clear_buffers = False
        else:
            # frequencies = {1: 8.571428571428571, 2: 6.666666666666667, 3: 7.5}
            predicted_frequency = target_identification.handleFreqMessages(result, frequencies, expected_target, filter_by_comparison=True)
            if predicted_frequency is not None:
                clear_buffers = True
    target_identification.results.trialEnded(packet_count)
    target_identification.new_results.trialEnded(packet_count)
    result = target_identification.new_results.list[-1]
    print str(result)
    print str(target_identification.results.list[-1])
    # print result[c.RESULTS_DATA_DIAGONAL_ELEMENTS], result[c.RESULTS_DATA_OFF_DIAGONAL_ELEMENTS], result[c.RESULTS_DATA_MACRO_F1]
    return 1-result.getData()[c.RESULTS_DATA_MACRO_F1]


parameter_handler = NewTrainingParameterHandler()

# result = scipy.optimize.differential_evolution(
#     costFunction,
#     parameter_handler.getBounds(),
#     args=(parameter_handler, frequencies),
#     popsize=20,
#     seed=99,
#     disp=True
# )
# print result

# costFunction(
#     (0.5, 0.5, 0.5, 0.5, 1, 0.05, 0.05, 0.05, 0.1, 0.05, 1, 0.005),
#     parameter_handler,
#     frequencies
# )

results = []
brute_force_parameter_handler = BruteForceHandler()
# for psda_1 in np.linspace(0, 10000, num=10):
#     for psda_2 in np.linspace(0, 10000, num=10):
#         # for psda_3 in np.linspace(0, 0.18, num=10):
#             for psda_sum in np.linspace(0, 10000, num=10):
#                 for cca in np.linspace(0, 0.18, num=10):
#                     minus_f1_score = costFunction(
#                         (psda_1, psda_2, psda_sum, cca),
#                         brute_force_parameter_handler,
#                         frequencies
#                     )
#                     results.append(minus_f1_score)
#
# print sorted(enumerate(results), key=lambda x: x[1])[1:100]

# new
# [(100, 0.76486948693864232), (10, 0.76638611691833425), (200, 0.76895154015869671), (110, 0.77205954511387387), (300, 0.77444481506175755), (20, 0.77592271258478784), (210, 0.77635847910754019), (30, 0.78013385486809628), (120, 0.78044512236934072), (400, 0.78121224821713797), (310, 0.78145980871385168), (220, 0.7839293638517244), (40, 0.78432960359508952), (1000, 0.78471306049666989), (130, 0.78482559369449012), (410, 0.78663389390784733), (320, 0.78739919816643766), (50, 0.78766898201991542), (230, 0.78793283940774206), (500, 0.78893333860377313), (140, 0.78928526878116256), (60, 0.79097211209067531), (330, 0.79106619179354509), (1100, 0.79109575160174783), (420, 0.79146793874863064), (1010, 0.79229206512356165), (240, 0.79249094666802733), (150, 0.79273007239485216), (510, 0.79446065355710904), (600, 0.79455453186730485), (340, 0.79503370918761285), (1200, 0.79517089540640162), (70, 0.79524271290475834), (430, 0.79545548605038308), (250, 0.79614641308943679), (160, 0.79626530658918782), (1110, 0.79831955014238898), (80, 0.79875203049018695), (350, 0.79881220028233313), (440, 0.79897045812046674), (520, 0.79918923330146252), (610, 0.79953886602209279), (260, 0.7997694201861415), (1300, 0.8002384927823285), (170, 0.80065511928099098), (1020, 0.80173751572266538), (450, 0.80236199759718951), (360, 0.8024733099003124), (1210, 0.80260112866564792), (90, 0.80261273055347648), (530, 0.80302648216032446), (700, 0.80319362478066691), (180, 0.80386778757166333), (620, 0.80398973552731223), (270, 0.80430827613972711), (1400, 0.80514516381649015), (1030, 0.80528622776095882), (800, 0.80574332099206425), (460, 0.80611293614911916), (540, 0.80641159013740316), (1120, 0.80643729341531989), (370, 0.80651124868210655), (1310, 0.8072235533071016), (630, 0.8073061212300694), (280, 0.80757411405000779), (190, 0.8078856452960459), (710, 0.80826943880152458), (1040, 0.80866822313060571), (2000, 0.8089563086366377), (550, 0.80930676882484531), (900, 0.80937719349697734), (1220, 0.80985013135205686), (380, 0.80991220986262069), (1130, 0.81013767592634345), (470, 0.8103575551982467), (1410, 0.81042855467467512), (640, 0.81072581268314847), (810, 0.81091915224596356), (290, 0.81129298051657506), (1500, 0.81140198131749763), (1050, 0.81199997082052588), (560, 0.81204299157702642), (480, 0.8125055919627473), (720, 0.81283614362998335), (650, 0.81302945847266272), (1320, 0.81305848497453126), (1230, 0.81307565262736248), (390, 0.8133833454573538), (1140, 0.813705745812769), (1060, 0.81433524561037207), (910, 0.81464201605289033), (570, 0.8146467573094851), (2010, 0.81494779787883576), (1420, 0.81508834557846654), (2100, 0.81530788522766673), (730, 0.81532931311762957), (820, 0.81559866049092378), (660, 0.81584247265943854), (490, 0.8161777169558676)]
# old
# [(6918, 0.44999999999999996), (6928, 0.44999999999999996), (6938, 0.44999999999999996), (9106, 0.45363408521303272), (9206, 0.45363408521303272), (4038, 0.45654345654345663), (4138, 0.45654345654345663), (4238, 0.45654345654345663), (4908, 0.45714285714285707), (4918, 0.45714285714285707), (4928, 0.45714285714285707), (4938, 0.45714285714285707), (1009, 0.46262626262626261), (1019, 0.46262626262626261), (2038, 0.46568627450980404), (3038, 0.47240259740259749), (3138, 0.47240259740259749), (3238, 0.47240259740259749), (9306, 0.47652116402116407), (9006, 0.48484848484848486), (7009, 0.48571428571428565), (7019, 0.48571428571428565), (7029, 0.48571428571428565), (7039, 0.48571428571428565), (7049, 0.48571428571428565), (7059, 0.48571428571428565), (7069, 0.48571428571428565), (7079, 0.48571428571428565), (7089, 0.48571428571428565), (7099, 0.48571428571428565), (7109, 0.48571428571428565), (7119, 0.48571428571428565), (7129, 0.48571428571428565), (7139, 0.48571428571428565), (7149, 0.48571428571428565), (7159, 0.48571428571428565), (7169, 0.48571428571428565), (7179, 0.48571428571428565), (7189, 0.48571428571428565), (7199, 0.48571428571428565), (7209, 0.48571428571428565), (7219, 0.48571428571428565), (7229, 0.48571428571428565), (7239, 0.48571428571428565), (7249, 0.48571428571428565), (7259, 0.48571428571428565), (7269, 0.48571428571428565), (7279, 0.48571428571428565), (7289, 0.48571428571428565), (7299, 0.48571428571428565), (8009, 0.48571428571428565), (8019, 0.48571428571428565), (8029, 0.48571428571428565), (8039, 0.48571428571428565), (8049, 0.48571428571428565), (8059, 0.48571428571428565), (8069, 0.48571428571428565), (8079, 0.48571428571428565), (8089, 0.48571428571428565), (8099, 0.48571428571428565), (8109, 0.48571428571428565), (8119, 0.48571428571428565), (8129, 0.48571428571428565), (8139, 0.48571428571428565), (8149, 0.48571428571428565), (8159, 0.48571428571428565), (8169, 0.48571428571428565), (8179, 0.48571428571428565), (8189, 0.48571428571428565), (8199, 0.48571428571428565), (8209, 0.48571428571428565), (8219, 0.48571428571428565), (8229, 0.48571428571428565), (8239, 0.48571428571428565), (8249, 0.48571428571428565), (8259, 0.48571428571428565), (8269, 0.48571428571428565), (8279, 0.48571428571428565), (8289, 0.48571428571428565), (8299, 0.48571428571428565), (9009, 0.48571428571428565), (9019, 0.48571428571428565), (9029, 0.48571428571428565), (9039, 0.48571428571428565), (9049, 0.48571428571428565), (9059, 0.48571428571428565), (9069, 0.48571428571428565), (9079, 0.48571428571428565), (9089, 0.48571428571428565), (9099, 0.48571428571428565), (9109, 0.48571428571428565), (9119, 0.48571428571428565), (9129, 0.48571428571428565), (9139, 0.48571428571428565), (9149, 0.48571428571428565), (9159, 0.48571428571428565), (9169, 0.48571428571428565), (9179, 0.48571428571428565), (9189, 0.48571428571428565)]

# 64100000
# np.linspace(0, 0.2, num=10)
# [(14601, 0.57058505242342306), (14611, 0.57216499885606542), (14500, 0.57346887064763219), (24600, 0.57428361051969412), (15600, 0.57453327628920636), (14700, 0.57465885003255601), (13600, 0.57480105718707442), (14701, 0.57563525003460092), (14610, 0.57651968156307132), (4600, 0.57669846869158525), (14501, 0.57705874395481294), (10501, 0.57708143223641017), (14711, 0.57718041861165825), (10601, 0.57776413860749964), (13700, 0.57807121902502612), (10701, 0.57836560180267016), (14620, 0.57842759041460612), (14650, 0.57859994837950257), (14511, 0.57862930990999351), (14400, 0.57877229190456547), (12600, 0.57886958455312509), (24500, 0.5792902795468764), (13601, 0.57929566343883399), (24610, 0.57976432314603044), (14661, 0.57981405004542586), (10511, 0.58000051225158356), (15610, 0.58013786483471086), (13701, 0.58024709029115473), (13650, 0.58029424673894492), (14640, 0.5803105600706131), (14520, 0.58041239034457459), (13611, 0.58068271228975776), (12601, 0.58069930139484116), (14550, 0.5807221691629969), (10611, 0.58073563229386749), (23600, 0.58075348424887618), (14630, 0.58084606699131469), (25600, 0.58095290425702917), (0, 0.58102070351226653), (14621, 0.58118791704751382), (10711, 0.58128341802110928), (12701, 0.58130273460956783), (14510, 0.58130300988447292), (24700, 0.58131780702960323), (15700, 0.58132228996418711), (4500, 0.58135050112976505), (13711, 0.5816036143263803), (15601, 0.58173384734338385), (13620, 0.58176255014433376), (30, 0.58188516467918672), (4601, 0.58188551356252394), (12700, 0.5818897405268938), (13661, 0.58213898102213224), (12611, 0.58216227994679626), (24620, 0.5821880559613466), (501, 0.5822297020423306), (14540, 0.5822551035916903), (15500, 0.58225629324836814), (14561, 0.58235044587098117), (4100, 0.58248533956211812), (14100, 0.58250463814946718), (13500, 0.58251594286874542), (13610, 0.58259399980323279), (24650, 0.5827043343048004), (12711, 0.58272987533414655), (100, 0.58275047200576113), (14530, 0.58275245410249243), (4700, 0.58286259956269437), (5600, 0.58287824826379386), (11511, 0.58309333042481915), (14710, 0.58313129353679205), (601, 0.58316307047144389), (24601, 0.58321752679511418), (14440, 0.58326971318706677), (11501, 0.58337909853585113), (14521, 0.58338352341983657), (12500, 0.58349259195217174), (10000, 0.58353289410732367), (14651, 0.5835621722562857), (4611, 0.58357696321680108), (15611, 0.58358149987767516), (13640, 0.5836613346176025), (3600, 0.58374910730546292), (25610, 0.58378950221316517), (15620, 0.58379206440804876), (13761, 0.58380738492713014), (701, 0.58391715737279393), (10521, 0.58396586336978507), (11611, 0.58398811493972302), (14641, 0.58401093172024232), (15650, 0.58401594473327378), (12620, 0.58412259845451664), (24520, 0.58412766108612324), (13630, 0.58415868512840463), (13750, 0.58416468941721678), (14800, 0.58419264167079099), (24640, 0.58419931916413903), (11601, 0.58436865140711314), (23650, 0.5843891504566453)]

# np.linspace(0, 0.18, num=10), beta=0.2
# [(950, 0.56347476341570779), (1930, 0.56382965154418607), (1960, 0.56438745760905906), (2950, 0.56477169747681955), (1830, 0.56506658600419091), (3950, 0.56506821401768004), (1940, 0.56517201338646816), (1850, 0.56525799147012223), (1630, 0.565867011390081), (930, 0.56588317782122122), (1650, 0.56594150415869726), (960, 0.56660457030089906), (1530, 0.56680474795250513), (1550, 0.56686214675090263), (830, 0.56699009067554185), (940, 0.56725429482002399), (850, 0.56730340851317562), (2930, 0.5674822859239802), (9250, 0.5674882136656576), (9260, 0.5674882136656576), (1730, 0.56752855753726705), (1750, 0.56762944285674999), (9230, 0.56765150947634102), (1910, 0.56766929575832958), (9150, 0.56777179660451949), (9160, 0.56777179660451949), (3930, 0.56784329283692192), (1920, 0.56786277739356572), (9130, 0.56800197630842042), (2960, 0.5680847410034604), (1860, 0.56839662371328048), (3960, 0.56841182271553881), (630, 0.56850492866852043), (2830, 0.56870320353316095), (650, 0.56876613817377697), (3550, 0.56877598817282493), (3530, 0.56878201109965842), (2940, 0.56880278820743935), (2850, 0.56884242553250619), (9950, 0.5688564527106621), (9960, 0.5688564527106621), (1980, 0.56902000235090633), (1660, 0.56902049767548113), (3830, 0.56907707968297883), (1840, 0.56908222868668923), (9240, 0.56918863556043198), (9550, 0.56919430324711917), (9560, 0.56919430324711917), (3940, 0.56919895619357663), (3850, 0.56923756731343755), (530, 0.56935650135282145), (9270, 0.56941372752541686), (730, 0.56942730702016298), (2630, 0.56944462969467069), (9140, 0.56946327863992274), (2650, 0.56946815140956164), (9930, 0.56948025812113423), (9650, 0.56956072550253523), (9660, 0.56956072550253523), (910, 0.5695670107147589), (9530, 0.56957465189783474), (550, 0.56958526889271455), (1640, 0.56961696174152898), (750, 0.56965412581906572), (9170, 0.56969672279172812), (8950, 0.5697669910391765), (8960, 0.5697669910391765), (3630, 0.56977942415842464), (920, 0.56980463844524676), (3650, 0.56981792839651413), (1230, 0.56984274564663095), (1560, 0.56986819876936523), (9630, 0.57001981537511903), (9220, 0.57006994861081406), (1430, 0.57014200894346734), (1250, 0.57018022809317914), (9210, 0.570201730533486), (1970, 0.57026516385196002), (8930, 0.57027044698346452), (1810, 0.5703097358337843), (1130, 0.57031479044441169), (8650, 0.57036580969522022), (8660, 0.57036580969522022), (860, 0.57037877648937674), (1450, 0.57039801904801357), (8260, 0.57041060926302323), (2530, 0.57042803508662476), (1540, 0.57043327164238278), (2550, 0.57043996087958471), (9120, 0.57050709690270274), (8160, 0.57053472507829972), (1820, 0.5705355893791203), (1150, 0.57063069614885187), (9110, 0.57066567500601872), (8630, 0.57072431946633084), (1760, 0.5707496820247987), (980, 0.5707526731820296), (9970, 0.57094032458453214), (840, 0.57094405438614271)]

# np.linspace(0, 0.18, num=10), beta=0.1
# [(8953, 0.54745270234576804), (8963, 0.54745270234576804), (1950, 0.54839180838614199), (8943, 0.54848204750273899), (9950, 0.54992186094794571), (9960, 0.54992186094794571), (9930, 0.55068518803727862), (7953, 0.55101496679665662), (7963, 0.55101496679665662), (950, 0.55121193371534671), (8950, 0.55125252609019171), (8960, 0.55125252609019171), (1930, 0.55131789763808392), (9124, 0.55134837439388651), (8933, 0.55141602782419241), (1960, 0.55149704997093596), (2950, 0.55154902136643535), (3950, 0.55155468541261055), (924, 0.55156113939483498), (964, 0.55182963264661389), (8930, 0.55188855043511098), (9970, 0.55191668087637402), (7943, 0.55201629477845615), (9650, 0.55222838015260767), (9660, 0.55222838015260767), (9940, 0.55224327070654189), (9550, 0.55228521681322129), (9560, 0.55228521681322129), (953, 0.55233453262132337), (9154, 0.55234692315152645), (9164, 0.55234692315152645), (9250, 0.55239393235574363), (9260, 0.55239393235574363), (8993, 0.55256671493631382), (9224, 0.55257650159763227), (1940, 0.55261910111445123), (164, 0.55262653273246598), (9230, 0.55263578014361314), (9530, 0.5527663163593719), (154, 0.55278462980720044), (9114, 0.55278548543094552), (9630, 0.55280677202449313), (944, 0.55287371684739539), (8973, 0.55295850754748965), (9953, 0.55295850754748965), (9963, 0.55295850754748965), (1850, 0.55296409487767773), (951, 0.55298078208574331), (1830, 0.55306266545169191), (9144, 0.55311453366971608), (914, 0.5531418299359574), (264, 0.55315024247341893), (8970, 0.55321154755435242), (1951, 0.5532150582375065), (9150, 0.55326228188599325), (9160, 0.55326228188599325), (254, 0.55330833954815339), (8650, 0.55341498493064156), (8660, 0.55341498493064156), (8940, 0.55349853801126958), (9130, 0.55357232462977957), (1954, 0.55362287277816935), (7950, 0.55367220031957043), (7960, 0.55367220031957043), (9254, 0.55369333604279136), (9264, 0.55369333604279136), (8630, 0.55388759821217148), (930, 0.55389182690211347), (8923, 0.55394672222689767), (9943, 0.5539878527044606), (9214, 0.55401840694148907), (9910, 0.55403594132979306), (9923, 0.5540473166302633), (9240, 0.5541230387853161), (9104, 0.55415955145650819), (9670, 0.55418226251749336), (9270, 0.55424151649903564), (9920, 0.55424288119598308), (960, 0.55425424360942421), (9570, 0.55425736036961837), (3953, 0.55427534288680858), (9540, 0.55428497683841693), (9640, 0.55429332610174953), (7930, 0.55431098657835587), (364, 0.55432648487264902), (9244, 0.55446330136448696), (934, 0.55451637378673901), (1650, 0.55455104460314697), (2930, 0.55456242047675275), (9134, 0.55459504262354442), (3930, 0.55464091033837581), (904, 0.55465392900209065), (1630, 0.5547550348269541), (354, 0.55476870185378102), (2960, 0.55477563281665443), (3960, 0.55480897971243692), (7933, 0.55487753774284265), (454, 0.55489559422203527), (9140, 0.55498029435952123)]
#

# np.linspace(0, 0.18, num=10), beta=1
# [(10, 0.65811124884965611), (120, 0.65821330827616409), (130, 0.65847197273334879), (20, 0.65853618461368768), (1110, 0.6586598359033613), (30, 0.65878572593217632), (1010, 0.65900245010877745), (1120, 0.65907726449966919), (1130, 0.65937879311185332), (1020, 0.65940953991632234), (100, 0.65957733545196184), (1030, 0.6597008570769598), (0, 0.66026934587198627), (1100, 0.66051381443430013), (210, 0.66061879554924119), (150, 0.66065154397276094), (50, 0.66094623358052962), (220, 0.66108115569584613), (1000, 0.66120970702658122), (230, 0.66140800066563221), (1150, 0.66149930277459956), (1210, 0.66154182403648432), (1050, 0.66180375178271533), (1220, 0.66198694551788972), (140, 0.66211305788207264), (1230, 0.6623595039242246), (40, 0.66240098087587373), (200, 0.66241069328818736), (1140, 0.66302520523176012), (1040, 0.66332157569561312), (1200, 0.66338874421183447), (160, 0.66348208652683049), (250, 0.66363045437990953), (60, 0.66375996246100555), (1160, 0.66437909159768438), (1250, 0.66452245188880976), (1060, 0.66466582949763153), (240, 0.66509121657800563), (2110, 0.66544672705627028), (2010, 0.66580166574999278), (2120, 0.66585814481836048), (310, 0.66600443339213722), (1240, 0.66604833618950088), (2130, 0.66617370372084816), (2020, 0.66620279806803073), (260, 0.66649000124116276), (2030, 0.66650807959401703), (320, 0.66672227556045105), (1310, 0.66693983100233101), (330, 0.66710997815087114), (2100, 0.66730777945045494), (1260, 0.66743280724418563), (1320, 0.66765621246922469), (300, 0.66780308662978483), (2000, 0.66801861931566542), (1330, 0.66809155432305545), (3110, 0.6681076374647672), (2150, 0.66828914081311186), (2210, 0.6683705932006867), (3010, 0.6684221905187081), (3120, 0.66854495957102911), (2050, 0.66860643163919242), (1300, 0.66879556693215703), (2220, 0.6688099169383408), (3020, 0.66884837066047931), (3130, 0.66893553413096241), (2230, 0.66919747050671918), (3030, 0.66922669022605918), (410, 0.66931534242396407), (350, 0.66935207233829763), (170, 0.66953450554693139), (70, 0.66956400674522221), (2140, 0.66982063675365966), (3100, 0.66996834995621668), (420, 0.67006111606638652), (2040, 0.67012941328824471), (2200, 0.67022465935364872), (1350, 0.670271593831687), (1170, 0.67046288346286464), (1070, 0.670484942816581), (1410, 0.67048876333320973), (430, 0.67053049953587252), (3000, 0.67063150096758584), (340, 0.6708220521630196), (510, 0.67100369840431606), (3150, 0.67108083138782371), (3210, 0.67109479163763497), (400, 0.67114227233467394), (1420, 0.67123331031307543), (2160, 0.67124548669657558), (3050, 0.67135399295744191), (2250, 0.67135532463106695), (2060, 0.67154478400515816), (3220, 0.67156172903211242), (520, 0.67174897377032639), (1430, 0.67175028379073021), (1340, 0.67180859743708643), (3230, 0.67202745297174649), (1510, 0.67213940512202375)]


# print costFunction(
#     (0.16, 0.18, 0.1, 0.06),
#     brute_force_parameter_handler,
#     frequencies
# )

# print costFunction(
#     (6666, 9999, 1111, 0.16),
#     brute_force_parameter_handler,
#     frequencies
# )

print costFunction(
    (0, 2222, 0, 0),
    brute_force_parameter_handler,
    frequencies
)

# result = scipy.optimize.differential_evolution(
#     costFunction,
#     brute_force_parameter_handler.getBounds(),
#     args=(brute_force_parameter_handler, frequencies),
#     popsize=20,
#     seed=99,
#     disp=True
# )
# print result
